{"version":3,"sources":["api.ts","types/ErrorText.ts","features/currentPost.ts","app/hooks.ts","components/CommentsList/CommentsList.tsx","components/ModalInfo/ModalInfo.tsx","components/Loader/Loader.tsx","features/error.ts","components/ModalAdding/ModalAdding.tsx","components/Post/Post.tsx","features/users.ts","App.tsx","app/store.ts","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","ErrorText","getPost","id","a","axios","get","then","response","data","getComments","createPost","userId","body","title","post","headers","postActions","value","type","payload","postReducer","action","useAppDispatch","useDispatch","useAppSelector","useSelector","CommentsList","panel","comments","useState","expanded","setExpanded","className","Accordion","onChange","event","isExpanded","disabled","length","AccordionSummary","expandIcon","aria-controls","Typography","variant","color","AccordionDetails","map","comment","name","sx","email","Divider","margin","ModalInfo","author","openInfo","handleCloseInfo","Modal","open","onClose","aria-labelledby","aria-describedby","closeAfterTransition","slots","backdrop","Backdrop","slotProps","timeout","Fade","in","Box","component","phone","website","company","Loader","CircularProgress","errorActions","errorReducer","error","NONE","ModalAdding","openAdding","setOpenAdding","dispatch","users","state","setUserId","postBody","setPostBody","postTitle","setPostTitle","isTitleTouched","setIsTitleTouched","isBodyTouched","setIsBodyTouched","isUserTouched","setIsUserTouched","isLoad","setIsLoad","setError","helperTextTitle","validator","isAlphanumeric","ignore","isValideTitle","helperBodyTitle","isAscii","isValidateBody","clearForm","handleCloseAddPost","postDataOnServer","e","preventDefault","newPost","POST_DATA","IconButton","onClick","Close","onSubmit","TextField","required","label","helperText","target","onFocus","FormControl","fullWidth","InputLabel","Select","user","MenuItem","username","FormHelperText","placeholder","multiline","rows","Button","Post","postId","setPostId","setComments","find","setOpenInfo","loadPostFromServer","postFromServer","LOAD_DATA","loadCommentsFromServer","commentsFromServer","useEffect","gutterBottom","Paper","elevation","actions","usersReducer","App","loadUsersFromServer","usersFromServer","usersActions","mt","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","severity","reducer","combineReducers","store","createStore","theme","createTheme","palette","primary","main","secondary","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"udAEMA,EAAW,uCAEjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAIjB,ICVKI,EDaCC,EAAO,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACfR,EAAK,KADU,gCAGdS,IAAMC,IAAN,UAAaX,EAAb,kBAA+BQ,IACnCI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAJR,2CAAH,sDAOPC,EAAW,uCAAG,WAAOP,GAAP,SAAAC,EAAA,sEACnBR,EAAK,KADc,gCAGlBS,IAAMC,IAAN,UAAaX,EAAb,kBAA+BQ,EAA/B,cACJI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAJJ,2CAAH,sDAOXE,EAAU,uCAAG,WAAOC,EAAgBC,EAAcC,GAArC,SAAAV,EAAA,sEAClBR,EAAK,KADa,gCAGjBS,IAAMU,KAAK,6CAA8C,CAC9DD,QACAD,OACAD,UACC,CACDI,QAAS,CACP,eAAgB,qCAGjBT,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAZL,2CAAH,0DEpBVQ,EAFD,SAACC,GAAD,MAAiC,CAAEC,KAAM,WAAYC,QAASF,IAc3DG,EAVK,WAAmD,IAAlDN,EAAiD,uDAAzB,KAAMO,EAAmB,uCACpE,OAAQA,EAAOH,MACb,IAAK,WACH,OAAOG,EAAOF,QAEhB,QACE,OAAOL,ICZAQ,EAAoCC,IACpCC,EAAkDC,I,sECQlDC,EAAgC,SAAC,GAAkB,IAGxCC,EAHwBC,EAAe,EAAfA,SAC9C,EAAgCC,oBAAyB,GAAzD,mBAAOC,EAAP,KAAiBC,EAAjB,KAMA,OACE,qBACEC,UAAU,gBADZ,SAGE,eAACC,EAAA,EAAD,CACEH,SAAuB,WAAbA,EACVI,UAVgBP,EAUO,SAVW,SAACQ,EAA6BC,GACpEL,IAAYK,GAAaT,KAUrBU,SAA+B,KAAb,OAART,QAAQ,IAARA,OAAA,EAAAA,EAAUU,QAHtB,UAKE,cAACC,EAAA,EAAD,CACEC,WAAY,cAAC,IAAD,IACZC,gBAAc,mBACdvC,GAAG,kBAHL,SAKE,cAACwC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAM,UAA/B,SACwB,KAAb,OAARhB,QAAQ,IAARA,OAAA,EAAAA,EAAUU,QAAe,kBAAoB,eAIlD,cAACO,EAAA,EAAD,iBACGjB,QADH,IACGA,OADH,EACGA,EAAUkB,KAAI,SAAAC,GAAO,OACpB,sBAEEf,UAAU,sBAFZ,UAIE,cAACU,EAAA,EAAD,CACEC,QAAQ,KADV,oBAGOI,EAAQnC,KAHf,OAMA,sBAAKoB,UAAU,wBAAf,UACE,cAACU,EAAA,EAAD,CAAYE,MAAM,UAAlB,SACGG,EAAQC,OAEX,cAACN,EAAA,EAAD,CAAYO,GAAI,CAAEL,MAAO,kBAAzB,SACGG,EAAQG,WAGb,cAACC,EAAA,EAAD,CAASF,GAAI,CAAEG,OAAQ,cAjBlBL,EAAQC,iB,oCC7BdK,EAA6B,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBAC7D,OACE,cAACC,EAAA,EAAD,CACEC,KAAMH,EACNI,QAASH,EACTI,kBAAgB,oBAChBC,mBAAiB,0BACjBC,sBAAoB,EACpBC,MAAO,CAAEC,SAAUC,KACnBC,UAAW,CACTF,SAAU,CACRG,QAAS,MATf,SAaE,cAACC,EAAA,EAAD,CAAMC,GAAId,EAAV,SACE,eAACe,EAAA,EAAD,CACEtC,UAAU,QADZ,UAGE,cAACU,EAAA,EAAD,CAAYxC,GAAG,oBAAoByC,QAAQ,KAAK4B,UAAU,KAAK3B,MAAM,UAArE,gBACGU,QADH,IACGA,OADH,EACGA,EAAQN,OAEX,sBAAKhB,UAAU,aAAa9B,GAAG,0BAA/B,UACE,cAACwC,EAAA,EAAD,CAAYE,MAAM,iBAAlB,mBAEA,cAACF,EAAA,EAAD,iBAAaY,QAAb,IAAaA,OAAb,EAAaA,EAAQJ,WAGvB,sBAAKlB,UAAU,aAAa9B,GAAG,0BAA/B,UACE,cAACwC,EAAA,EAAD,CAAYE,MAAM,iBAAlB,mBAEA,cAACF,EAAA,EAAD,iBAAaY,QAAb,IAAaA,OAAb,EAAaA,EAAQkB,WAGvB,sBAAKxC,UAAU,aAAa9B,GAAG,0BAA/B,UACE,cAACwC,EAAA,EAAD,CAAYE,MAAM,iBAAlB,qBAEA,cAACF,EAAA,EAAD,iBAAaY,QAAb,IAAaA,OAAb,EAAaA,EAAQmB,aAGvB,sBAAKzC,UAAU,aAAa9B,GAAG,0BAA/B,UACE,cAACwC,EAAA,EAAD,CAAYE,MAAM,iBAAlB,qBAEA,cAACF,EAAA,EAAD,iBAAaY,QAAb,IAAaA,OAAb,EAAaA,EAAQoB,QAAQ1B,kB,SCnD5B2B,G,OAAmB,kBAC9B,qBACE3C,UAAU,SADZ,SAGE,cAAC4C,EAAA,EAAD,CACE3B,GAAI,CACFG,OAAQ,e,SLVJpD,K,kDAAAA,E,kDAAAA,E,SAAAA,M,KMKZ,IAEa6E,EAFD,SAAC5D,GAAD,MAAkC,CAAEC,KAAM,YAAaC,QAASF,IAc7D6D,EAVM,WAAwD,IAAvDC,EAAsD,uDAAnC/E,EAAUgF,KAAM3D,EAAmB,uCAC1E,OAAQA,EAAOH,MACb,IAAK,YACH,OAAOG,EAAOF,QAEhB,QACE,OAAO4D,I,kGCKAE,GAA+B,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACnDC,EAAW9D,IACX+D,EAAQ7D,GAAe,SAAA8D,GAAK,OAAIA,EAAMD,SAC5C,EAA4BxD,mBAAS,IAArC,mBAAOlB,EAAP,KAAe4E,EAAf,KACA,EAAgC1D,mBAAS,IAAzC,mBAAO2D,EAAP,KAAiBC,EAAjB,KACA,EAAkC5D,mBAAS,IAA3C,mBAAO6D,EAAP,KAAkBC,EAAlB,KACA,EAA4C9D,oBAAS,GAArD,mBAAO+D,EAAP,KAAuBC,EAAvB,KACA,EAA0ChE,oBAAS,GAAnD,mBAAOiE,EAAP,KAAsBC,EAAtB,KACA,EAA0ClE,oBAAS,GAAnD,mBAAOmE,EAAP,KAAsBC,EAAtB,KACA,EAA4BpE,oBAAS,GAArC,mBAAOqE,EAAP,KAAeC,EAAf,KACMC,GAAW,SAACnF,GAAD,OAAsBmE,EAASP,EAAiB5D,KAG3DoF,GAAkB,WACtB,OAAKX,EAIDA,GAAaA,EAAUpD,OAAS,EAC3B,2CAGLoD,IAAcY,KAAUC,eAAeb,EAAW,QAAS,CAAEc,OAAQ,MAChE,sDAGF,IAXE,qBAcLC,GAAsC,MAAtBJ,KAEhBK,GAAkB,WACtB,OAAKlB,EAIDA,GAAYA,EAASlD,OAAS,GACzB,gDAGLkD,IAAac,KAAUK,QAAQnB,GAC1B,8CAGF,IAXE,oBAcLoB,GAAuC,MAAtBF,KAcjBG,GAAY,WAChBtB,EAAU,IACVE,EAAY,IACZE,EAAa,IACbI,GAAiB,GACjBF,GAAkB,GAClBI,GAAiB,IAGba,GAAqB,WACzB3B,GAAc,GACd0B,MAGIE,GAAgB,uCAAG,WAAOC,GAAP,eAAA7G,EAAA,6DACvB6G,EAAEC,iBADqB,SAGrBd,GAAU,GAHW,SAICzF,GAAYC,EAAQ6E,EAAUE,GAJ/B,OAIfwB,EAJe,OAhEY9B,EAASpE,EAsElCkG,IACRJ,KAPqB,kDASrBV,GAASpG,EAAUmH,WATE,yBAWrBhB,GAAU,GAXW,6EAAH,sDAetB,OACE,qCACGD,GAAU,cAAC,EAAD,IAEX,cAACzC,EAAA,EAAD,CACEC,KAAMwB,EACNtB,kBAAgB,oBAChBC,mBAAiB,0BACjBC,sBAAoB,EACpBC,MAAO,CAAEC,SAAUC,KACnBC,UAAW,CACTF,SAAU,CACRG,QAAS,MARf,SAYE,cAACC,EAAA,EAAD,CAAMC,GAAIa,EAAV,SACE,eAACZ,EAAA,EAAD,CACEtC,UAAU,QADZ,UAGE,eAACsC,EAAA,EAAD,CAAKtC,UAAU,aAAf,UACE,cAACU,EAAA,EAAD,CAAYxC,GAAG,oBAAoByC,QAAQ,KAAK4B,UAAU,KAAK3B,MAAM,UAArE,yBAIA,cAACwE,EAAA,EAAD,CAAYC,QAASP,GAArB,SACE,cAACQ,GAAA,EAAD,SAIJ,uBACEtF,UAAU,cACVuF,SAAU,SAAAP,GAAC,OAAID,GAAiBC,IAFlC,UAIE,cAACQ,EAAA,EAAD,CACEC,UAAQ,EACR1C,OAAQ0B,IAAiBb,EACzB8B,MAAM,aACN/E,QAAQ,WACRgF,WAAY/B,EAAiBS,KAAoB,IACjDpF,MAAOyE,EACPxD,SA1EU,SAACC,GACvBwD,EAAaxD,EAAMyF,OAAO3G,QA0Ed4G,QAAS,kBAAMhC,GAAkB,MAGnC,eAACiC,EAAA,EAAD,CAAaC,WAAS,EAAtB,UACE,cAACC,GAAA,EAAD,CACEjD,OAAQpE,GAAUqF,EAClB9F,GAAG,2BAFL,2BAOA,cAAC+H,GAAA,EAAD,CACE/H,GAAG,qBACHuH,UAAQ,EACRxG,MAAON,EACP+G,MAAM,gBACN/E,QAAQ,WACRoC,OAAQpE,GAAUqF,EAClB9D,SArGS,SAACC,GACxBoD,EAAUpD,EAAMyF,OAAO3G,QAqGT4G,QAAS,kBAAM5B,GAAiB,IARlC,SAUGZ,EAAMvC,KAAI,SAAAoF,GAAI,OACb,cAACC,GAAA,EAAD,CAAUlH,MAAOiH,EAAKhI,GAAtB,SACGgI,EAAKE,UADuBF,EAAK1D,YAKxC,cAAC6D,GAAA,EAAD,CAAgBtD,OAAK,EAArB,UACIpE,GAAUqF,EAAgB,mBAAqB,SAIrD,cAACwB,EAAA,EAAD,CACEC,UAAQ,EACR1C,OAAQ6B,IAAkBd,EAC1B5F,GAAG,6BACHyC,QAAQ,WACR2F,YAAY,kBACZC,WAAS,EACTC,KAAM,EACNb,WAAY7B,EAAgBY,KAAoB,IAChDzF,MAAOuE,EACPtD,SAzHS,SAACC,GACtBsD,EAAYtD,EAAMyF,OAAO3G,QAyHb4G,QAAS,kBAAM9B,GAAiB,MAGlC,sBAAK/D,UAAU,aAAf,UACE,cAACyG,EAAA,EAAD,CAAQ9F,QAAQ,WAAW0E,QAASR,GAApC,mBAIA,cAAC4B,EAAA,EAAD,CACEvH,KAAK,SACLmB,UAAWoE,KAAkBG,KAAmBjG,EAChDgC,QAAQ,YAHV,uCC1LH+F,I,OAAO,WAClB,MAA4B7G,oBAAS,GAArC,mBAAOqE,EAAP,KAAeC,EAAf,KACA,EAA4BtE,mBAAS,GAArC,mBAAO8G,EAAP,KAAeC,EAAf,KACA,EAAgC/G,mBAA+B,MAA/D,mBAAOD,EAAP,KAAiBiH,EAAjB,KACM/H,EAAOU,GAAe,SAAA8D,GAAK,OAAIA,EAAMxE,QAErCwC,EADQ9B,GAAe,SAAA8D,GAAK,OAAIA,EAAMD,SACvByD,MAAK,SAAAZ,GAAI,OAAIA,EAAKhI,MAAL,OAAYY,QAAZ,IAAYA,OAAZ,EAAYA,EAAMH,WACpD,EAAgCkB,oBAAS,GAAzC,mBAAO0B,EAAP,KAAiBwF,EAAjB,KACA,EAAoClH,oBAAS,GAA7C,mBAAOqD,EAAP,KAAmBC,EAAnB,KAEMC,EAAW9D,IAEX8E,EAAW,SAACnF,GAAD,OAAsBmE,EAASP,EAAiB5D,KAE3D+H,EAAkB,uCAAG,4BAAA7I,EAAA,sEAEvBgG,GAAU,GAFa,SAGMlG,EAAQ0I,GAHd,OAGjBM,EAHiB,OAHU7D,EAASpE,EAQlCiI,IALe,gDAOvB7C,EAASpG,EAAUkJ,WAPI,yBASvB/C,GAAU,GATa,4EAAH,qDAalBgD,EAAsB,uCAAG,4BAAAhJ,EAAA,sEAE3BgG,GAAU,GAFiB,SAGM1F,GAAgB,OAAJK,QAAI,IAAJA,OAAA,EAAAA,EAAMZ,KAAM,GAH9B,OAGrBkJ,EAHqB,OAK3BP,EAAYO,GALe,gDAO3BhD,EAASpG,EAAUkJ,WAPQ,yBAS3B/C,GAAU,GATiB,4EAAH,qDAiC5B,OARAkD,qBAAU,WACRL,MACC,CAACL,IAEJU,qBAAU,WACRF,MACC,QAACrI,QAAD,IAACA,OAAD,EAACA,EAAMZ,KAGR,qCACE,sBACE8B,UAAU,OADZ,UAGGkE,GAAU,cAAC,EAAD,IAEX,sBAAKlE,UAAU,cAAf,UACE,cAACU,EAAA,EAAD,CACEC,QAAQ,KACR2G,cAAY,EACZ1G,MAAM,UAHR,gBAKG9B,QALH,IAKGA,OALH,EAKGA,EAAMD,QAGT,cAAC6B,EAAA,EAAD,CAAYC,QAAQ,KAApB,mCACeW,QADf,IACeA,OADf,EACeA,EAAQ8E,eAIzB,sBAAKpG,UAAU,gBAAf,UACE,eAACyG,EAAA,EAAD,CAAQpB,QAtCO,WACrBuB,EAAUD,EAAS,EAAIA,EAAS,EAAI,MAqC9B,UACE,cAAC,IAAD,IADF,UAKA,cAACF,EAAA,EAAD,CAAQpB,QAvCO,kBAAM0B,GAAY,IAuCApG,QAAQ,YAAzC,8BAEA,cAAC8F,EAAA,EAAD,CAAQpB,QAvCU,kBAAMlC,GAAc,IAuCFxC,QAAQ,YAA5C,sBAEA,eAAC8F,EAAA,EAAD,CAAQpB,QAnDO,WACrBuB,EAAUD,EAAS,IAAMA,EAAS,EAAI,IAkDhC,iBAEE,cAAC,IAAD,UAIJ,cAACY,EAAA,EAAD,CAAOC,UAAW,EAAlB,SACE,cAAC9G,EAAA,EAAD,CACEC,QAAQ,KACR2G,cAAY,EACZtH,UAAU,aAHZ,gBAKGlB,QALH,IAKGA,OALH,EAKGA,EAAMF,SAIX,cAAC,EAAD,CACEgB,SAAUA,OAId,cAAC,EAAD,CACE0B,OAAQA,EACRC,SAAUA,EACVC,gBAlEkB,kBAAMuF,GAAY,MAqEtC,cAAC,GAAD,CACE7D,WAAYA,EACZC,cAAeA,SClIVsE,GAFD,SAACxI,GAAD,MAAmC,CAAEC,KAAM,YAAaC,QAASF,IAc9DyI,GAVM,WAA6C,IAA5CrE,EAA2C,uDAAvB,GAAIhE,EAAmB,uCAC/D,OAAQA,EAAOH,MACb,IAAK,YACH,OAAOG,EAAOF,QAEhB,QACE,OAAOkE,ICJAsE,GAAgB,WAC3B,IAAM5E,EAAQvD,GAAe,SAAA8D,GAAK,OAAIA,EAAMP,SACtCK,EAAW9D,IAGX8E,EAAW,SAACnF,GAAD,OAAsBmE,EAASP,EAAiB5D,KAE3D2I,EAAmB,uCAAG,4BAAAzJ,EAAA,+EXRAC,IAAMC,IAAN,UAAaX,EAAb,WAC3BY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QWOC,OAElBqJ,EAFkB,OAHYzE,EAAS0E,GAOpCD,IAJe,gDAMxBzD,EAASpG,EAAUkJ,WANK,yDAAH,qDAczB,OAJAG,qBAAU,WACRO,MACC,IAGD,0BAAS5H,UAAU,MAAnB,UACG+C,IAAU/E,EAAUkJ,UAEjB,cAACxG,EAAA,EAAD,CACEC,QAAQ,KACR2G,cAAY,EACZ1G,MAAM,UACNK,GAAI,CAAE8G,GAAI,SAJZ,SAMGhF,IAGH,cAAC,GAAD,IAEJ,cAACiF,EAAA,EAAD,CACEtG,KAAMqB,IAAU/E,EAAUgF,KAC1BiF,iBAAkB,IAClBtG,QAAS,kBAAMyC,EAASpG,EAAUgF,OAClCkF,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAJ/C,SAME,cAACC,EAAA,EAAD,CAAOC,SAAS,QAAhB,SACGvF,U,UCjDLwF,GAAUC,aAAgB,CAC9B1J,KAAMM,EACNiE,MAAOqE,GACP3E,MAAOD,IAOM2F,GALDC,aAAYH,ICFpBI,GAAQC,YAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,cAKZE,IAASC,OACP,cAAC,IAAD,CAAUT,MAAOA,GAAjB,SACE,cAAC,IAAMU,WAAP,UACE,cAACC,EAAA,EAAD,CAAeT,MAAOA,GAAtB,SACE,cAAC,GAAD,UAINU,SAASC,eAAe,W","file":"static/js/main.061a0522.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nexport const getUsers = () => axios.get(`${BASE_URL}/users`)\n  .then(response => response.data);\n\nexport const getPost = async (id: number) => {\n  await wait(300);\n\n  return axios.get(`${BASE_URL}/posts/${id}`)\n    .then(response => response.data);\n};\n\nexport const getComments = async (id: number) => {\n  await wait(1000);\n\n  return axios.get(`${BASE_URL}/posts/${id}/comments`)\n    .then(response => response.data);\n};\n\nexport const createPost = async (userId: number, body: string, title: string) => {\n  await wait(1000);\n\n  return axios.post('https://jsonplaceholder.typicode.com/posts', {\n    title,\n    body,\n    userId,\n  }, {\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  })\n    .then(response => response.data);\n};\n","export enum ErrorText {\n  LOAD_DATA = 'Unable to load data. Try again later!',\n  POST_DATA = 'Unable to post data. Try again later!',\n  NONE = '',\n}\n","import { PostType } from '../types/PostType';\n\ntype SetAction = { type: 'post/SET', payload: PostType };\ntype Action = SetAction;\n\nconst set = (value: PostType): SetAction => ({ type: 'post/SET', payload: value });\n\nexport const postActions = { set };\n\nconst postReducer = (post: PostType | null = null, action: Action) => {\n  switch (action.type) {\n    case 'post/SET':\n      return action.payload;\n\n    default:\n      return post;\n  }\n};\n\nexport default postReducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState } from 'react';\nimport {\n  Accordion, AccordionDetails, AccordionSummary, Divider, Typography,\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { CommentType } from '../../types/CommentType';\nimport './CommentsList.scss';\n\ntype Props = {\n  comments: CommentType[] | null,\n};\n\nexport const CommentsList: React.FC<Props> = ({ comments }) => {\n  const [expanded, setExpanded] = useState<string | false>(false);\n\n  const handleChange = (panel: string) => (event: React.SyntheticEvent, isExpanded: boolean) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n\n  return (\n    <div\n      className=\"comments-list\"\n    >\n      <Accordion\n        expanded={expanded === 'panel1'}\n        onChange={handleChange('panel1')}\n        disabled={comments?.length === 0}\n      >\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1bh-content\"\n          id=\"panel1bh-header\"\n        >\n          <Typography variant=\"h5\" color=\"primary\">\n            {comments?.length === 0 ? 'No comments yet' : 'Comments'}\n          </Typography>\n        </AccordionSummary>\n\n        <AccordionDetails>\n          {comments?.map(comment => (\n            <div\n              key={comment.name}\n              className=\"comments-list__item\"\n            >\n              <Typography\n                variant=\"h6\"\n              >\n                {`\"${comment.body}\"`}\n              </Typography>\n\n              <div className=\"comments-list__titles\">\n                <Typography color=\"primary\">\n                  {comment.name}\n                </Typography>\n                <Typography sx={{ color: 'text.secondary' }}>\n                  {comment.email}\n                </Typography>\n              </div>\n              <Divider sx={{ margin: '20px 0' }} />\n            </div>\n          ))}\n        </AccordionDetails>\n      </Accordion>\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  Backdrop, Box, Fade, Modal, Typography,\n} from '@mui/material';\nimport { UserType } from '../../types/UserType';\n\ntype Props = {\n  author?: UserType,\n  openInfo: boolean,\n  handleCloseInfo: () => void,\n};\n\nexport const ModalInfo: React.FC<Props> = ({ author, openInfo, handleCloseInfo }) => {\n  return (\n    <Modal\n      open={openInfo}\n      onClose={handleCloseInfo}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n      closeAfterTransition\n      slots={{ backdrop: Backdrop }}\n      slotProps={{\n        backdrop: {\n          timeout: 500,\n        },\n      }}\n    >\n      <Fade in={openInfo}>\n        <Box\n          className=\"modal\"\n        >\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\" color=\"primary\">\n            {author?.name}\n          </Typography>\n          <div className=\"modal__row\" id=\"modal-modal-description\">\n            <Typography color=\"text.secondary\">Email</Typography>\n\n            <Typography>{author?.email}</Typography>\n          </div>\n\n          <div className=\"modal__row\" id=\"modal-modal-description\">\n            <Typography color=\"text.secondary\">Phone</Typography>\n\n            <Typography>{author?.phone}</Typography>\n          </div>\n\n          <div className=\"modal__row\" id=\"modal-modal-description\">\n            <Typography color=\"text.secondary\">Website</Typography>\n\n            <Typography>{author?.website}</Typography>\n          </div>\n\n          <div className=\"modal__row\" id=\"modal-modal-description\">\n            <Typography color=\"text.secondary\">Company</Typography>\n\n            <Typography>{author?.company.name}</Typography>\n          </div>\n        </Box>\n      </Fade>\n    </Modal>\n  );\n};\n","import { CircularProgress } from '@mui/material';\nimport React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div\n    className=\"loader\"\n  >\n    <CircularProgress\n      sx={{\n        margin: 'auto',\n      }}\n    />\n  </div>\n);\n","import { ErrorText } from '../types/ErrorText';\n\ntype SetAction = { type: 'error/SET', payload: ErrorText };\ntype Action = SetAction;\n\nconst set = (value: ErrorText): SetAction => ({ type: 'error/SET', payload: value });\n\nexport const errorActions = { set };\n\nconst errorReducer = (error: ErrorText = ErrorText.NONE, action: Action) => {\n  switch (action.type) {\n    case 'error/SET':\n      return action.payload;\n\n    default:\n      return error;\n  }\n};\n\nexport default errorReducer;\n","import React, { useState } from 'react';\nimport {\n  Backdrop, Box, Button, Fade, FormControl, FormHelperText, IconButton, InputLabel,\n  MenuItem, Modal, Select, SelectChangeEvent, TextField, Typography,\n} from '@mui/material';\nimport { Close } from '@mui/icons-material';\nimport validator from 'validator';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { createPost } from '../../api';\nimport { ErrorText } from '../../types/ErrorText';\nimport { PostType } from '../../types/PostType';\nimport { errorActions } from '../../features/error';\nimport { postActions } from '../../features/currentPost';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  openAdding: boolean,\n  setOpenAdding: (isClose: boolean) => void,\n};\n\nexport const ModalAdding: React.FC<Props> = ({ openAdding, setOpenAdding }) => {\n  const dispatch = useAppDispatch();\n  const users = useAppSelector(state => state.users);\n  const [userId, setUserId] = useState('');\n  const [postBody, setPostBody] = useState('');\n  const [postTitle, setPostTitle] = useState('');\n  const [isTitleTouched, setIsTitleTouched] = useState(false);\n  const [isBodyTouched, setIsBodyTouched] = useState(false);\n  const [isUserTouched, setIsUserTouched] = useState(false);\n  const [isLoad, setIsLoad] = useState(false);\n  const setError = (value: ErrorText) => dispatch(errorActions.set(value));\n  const setPost = (value: PostType) => dispatch(postActions.set(value));\n\n  const helperTextTitle = () => {\n    if (!postTitle) {\n      return 'Title is required';\n    }\n\n    if (postTitle && postTitle.length < 5) {\n      return 'Title must be at least 5 characters long';\n    }\n\n    if (postTitle && !validator.isAlphanumeric(postTitle, 'en-US', { ignore: ' ' })) {\n      return 'Title can only contain letters, numbers, and spaces';\n    }\n\n    return ' ';\n  };\n\n  const isValideTitle = helperTextTitle() === ' ';\n\n  const helperBodyTitle = () => {\n    if (!postBody) {\n      return 'Body is required';\n    }\n\n    if (postBody && postBody.length < 10) {\n      return 'Post body must be at least 10 characters long';\n    }\n\n    if (postBody && !validator.isAscii(postBody)) {\n      return 'Post body can only contain ASCII characters';\n    }\n\n    return ' ';\n  };\n\n  const isValidateBody = helperBodyTitle() === ' ';\n\n  const handleSelectUser = (event: SelectChangeEvent) => {\n    setUserId(event.target.value as string);\n  };\n\n  const handlePostBody = (event: { target: { value: string; }; }) => {\n    setPostBody(event.target.value as string);\n  };\n\n  const handlePostTitle = (event: { target: { value: string; }; }) => {\n    setPostTitle(event.target.value as string);\n  };\n\n  const clearForm = () => {\n    setUserId('');\n    setPostBody('');\n    setPostTitle('');\n    setIsBodyTouched(false);\n    setIsTitleTouched(false);\n    setIsUserTouched(false);\n  };\n\n  const handleCloseAddPost = () => {\n    setOpenAdding(false);\n    clearForm();\n  };\n\n  const postDataOnServer = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    try {\n      setIsLoad(true);\n      const newPost = await createPost(+userId, postBody, postTitle);\n\n      setPost(newPost);\n      handleCloseAddPost();\n    } catch {\n      setError(ErrorText.POST_DATA);\n    } finally {\n      setIsLoad(false);\n    }\n  };\n\n  return (\n    <>\n      {isLoad && <Loader />}\n\n      <Modal\n        open={openAdding}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n        closeAfterTransition\n        slots={{ backdrop: Backdrop }}\n        slotProps={{\n          backdrop: {\n            timeout: 500,\n          },\n        }}\n      >\n        <Fade in={openAdding}>\n          <Box\n            className=\"modal\"\n          >\n            <Box className=\"modal__row\">\n              <Typography id=\"modal-modal-title\" variant=\"h5\" component=\"h2\" color=\"primary\">\n                Create post\n              </Typography>\n\n              <IconButton onClick={handleCloseAddPost}>\n                <Close />\n              </IconButton>\n            </Box>\n\n            <form\n              className=\"modal__form\"\n              onSubmit={e => postDataOnServer(e)}\n            >\n              <TextField\n                required\n                error={!isValideTitle && isTitleTouched}\n                label=\"Post title\"\n                variant=\"standard\"\n                helperText={isTitleTouched ? helperTextTitle() : ' '}\n                value={postTitle}\n                onChange={handlePostTitle}\n                onFocus={() => setIsTitleTouched(true)}\n              />\n\n              <FormControl fullWidth>\n                <InputLabel\n                  error={!userId && isUserTouched}\n                  id=\"demo-simple-select-label\"\n                >\n                  Select author\n                </InputLabel>\n\n                <Select\n                  id=\"demo-simple-select\"\n                  required\n                  value={userId}\n                  label=\"Select author\"\n                  variant=\"outlined\"\n                  error={!userId && isUserTouched}\n                  onChange={handleSelectUser}\n                  onFocus={() => setIsUserTouched(true)}\n                >\n                  {users.map(user => (\n                    <MenuItem value={user.id} key={user.phone}>\n                      {user.username}\n                    </MenuItem>\n                  ))}\n                </Select>\n                <FormHelperText error>\n                  {!userId && isUserTouched ? 'User is required' : ' '}\n                </FormHelperText>\n              </FormControl>\n\n              <TextField\n                required\n                error={!isValidateBody && isBodyTouched}\n                id=\"outlined-error-helper-text\"\n                variant=\"outlined\"\n                placeholder=\"Write your post\"\n                multiline\n                rows={5}\n                helperText={isBodyTouched ? helperBodyTitle() : ' '}\n                value={postBody}\n                onChange={handlePostBody}\n                onFocus={() => setIsBodyTouched(true)}\n              />\n\n              <div className=\"modal__row\">\n                <Button variant=\"outlined\" onClick={clearForm}>\n                  Clear\n                </Button>\n\n                <Button\n                  type=\"submit\"\n                  disabled={!isValideTitle || !isValidateBody || !userId}\n                  variant=\"contained\"\n                >\n                  Add post\n                </Button>\n              </div>\n            </form>\n          </Box>\n        </Fade>\n      </Modal>\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Button, Paper, Typography } from '@mui/material';\nimport ArrowForwardIosRoundedIcon from '@mui/icons-material/ArrowForwardIosRounded';\nimport ArrowBackIosNewRoundedIcon from '@mui/icons-material/ArrowBackIosNewRounded';\nimport { getPost, getComments } from '../../api';\nimport { postActions } from '../../features/currentPost';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { CommentsList } from '../CommentsList';\nimport { ModalInfo } from '../ModalInfo';\nimport { Loader } from '../Loader';\nimport { PostType } from '../../types/PostType';\nimport { ErrorText } from '../../types/ErrorText';\nimport { CommentType } from '../../types/CommentType';\nimport { errorActions } from '../../features/error';\nimport { ModalAdding } from '../ModalAdding';\nimport './Post.scss';\n\nexport const Post = () => {\n  const [isLoad, setIsLoad] = useState(false);\n  const [postId, setPostId] = useState(1);\n  const [comments, setComments] = useState<CommentType[] | null>(null);\n  const post = useAppSelector(state => state.post);\n  const users = useAppSelector(state => state.users);\n  const author = users.find(user => user.id === post?.userId);\n  const [openInfo, setOpenInfo] = useState(false);\n  const [openAdding, setOpenAdding] = useState(false);\n\n  const dispatch = useAppDispatch();\n  const setPost = (value: PostType) => dispatch(postActions.set(value));\n  const setError = (value: ErrorText) => dispatch(errorActions.set(value));\n\n  const loadPostFromServer = async () => {\n    try {\n      setIsLoad(true);\n      const postFromServer = await getPost(postId);\n\n      setPost(postFromServer);\n    } catch {\n      setError(ErrorText.LOAD_DATA);\n    } finally {\n      setIsLoad(false);\n    }\n  };\n\n  const loadCommentsFromServer = async () => {\n    try {\n      setIsLoad(true);\n      const commentsFromServer = await getComments(post?.id || 1);\n\n      setComments(commentsFromServer);\n    } catch {\n      setError(ErrorText.LOAD_DATA);\n    } finally {\n      setIsLoad(false);\n    }\n  };\n\n  const handleNextPost = () => {\n    setPostId(postId < 100 ? postId + 1 : 1);\n  };\n\n  const handlePrevPost = () => {\n    setPostId(postId > 1 ? postId - 1 : 100);\n  };\n\n  const handleOpenInfo = () => setOpenInfo(true);\n  const handleCloseInfo = () => setOpenInfo(false);\n  const handleOpenAddPost = () => setOpenAdding(true);\n\n  useEffect(() => {\n    loadPostFromServer();\n  }, [postId]);\n\n  useEffect(() => {\n    loadCommentsFromServer();\n  }, [post?.id]);\n\n  return (\n    <>\n      <div\n        className=\"post\"\n      >\n        {isLoad && <Loader />}\n\n        <div className=\"post__title\">\n          <Typography\n            variant=\"h4\"\n            gutterBottom\n            color=\"primary\"\n          >\n            {post?.title}\n          </Typography>\n\n          <Typography variant=\"h6\">\n            {`added by ${author?.username}`}\n          </Typography>\n        </div>\n\n        <div className=\"post__control\">\n          <Button onClick={handlePrevPost}>\n            <ArrowBackIosNewRoundedIcon />\n            Prev\n          </Button>\n\n          <Button onClick={handleOpenInfo} variant=\"contained\">Open author info</Button>\n\n          <Button onClick={handleOpenAddPost} variant=\"contained\">Add post</Button>\n\n          <Button onClick={handleNextPost}>\n            Next\n            <ArrowForwardIosRoundedIcon />\n          </Button>\n        </div>\n\n        <Paper elevation={3}>\n          <Typography\n            variant=\"h5\"\n            gutterBottom\n            className=\"post__body\"\n          >\n            {post?.body}\n          </Typography>\n        </Paper>\n\n        <CommentsList\n          comments={comments}\n        />\n      </div>\n\n      <ModalInfo\n        author={author}\n        openInfo={openInfo}\n        handleCloseInfo={handleCloseInfo}\n      />\n\n      <ModalAdding\n        openAdding={openAdding}\n        setOpenAdding={setOpenAdding}\n      />\n    </>\n  );\n};\n","import { UserType } from '../types/UserType';\n\ntype SetAction = { type: 'users/SET', payload: UserType[] };\ntype Action = SetAction;\n\nconst set = (value: UserType[]): SetAction => ({ type: 'users/SET', payload: value });\n\nexport const actions = { set };\n\nconst usersReducer = (users: UserType[] = [], action: Action) => {\n  switch (action.type) {\n    case 'users/SET':\n      return action.payload;\n\n    default:\n      return users;\n  }\n};\n\nexport default usersReducer;\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport { Alert, Snackbar, Typography } from '@mui/material';\nimport { Post } from './components/Post';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { UserType } from './types/UserType';\nimport { actions as usersActions } from './features/users';\nimport { getUsers } from './api';\nimport { ErrorText } from './types/ErrorText';\nimport { errorActions } from './features/error';\n\nexport const App: React.FC = () => {\n  const error = useAppSelector(state => state.error);\n  const dispatch = useAppDispatch();\n\n  const setUsers = (value: UserType[]) => dispatch(usersActions.set(value));\n  const setError = (value: ErrorText) => dispatch(errorActions.set(value));\n\n  const loadUsersFromServer = async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch {\n      setError(ErrorText.LOAD_DATA);\n    }\n  };\n\n  useEffect(() => {\n    loadUsersFromServer();\n  }, []);\n\n  return (\n    <section className=\"app\">\n      {error === ErrorText.LOAD_DATA\n        ? (\n          <Typography\n            variant=\"h4\"\n            gutterBottom\n            color=\"primary\"\n            sx={{ mt: '200px' }}\n          >\n            {error}\n          </Typography>\n        )\n        : <Post />}\n\n      <Snackbar\n        open={error !== ErrorText.NONE}\n        autoHideDuration={5000}\n        onClose={() => setError(ErrorText.NONE)}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      >\n        <Alert severity=\"error\">\n          {error}\n        </Alert>\n      </Snackbar>\n    </section>\n  );\n};\n","import { combineReducers, legacy_createStore as createStore } from 'redux';\nimport postReducer from '../features/currentPost';\nimport usersReducer from '../features/users';\nimport errorReducer from '../features/error';\n\nconst reducer = combineReducers({\n  post: postReducer,\n  users: usersReducer,\n  error: errorReducer,\n});\nconst store = createStore(reducer);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createTheme, ThemeProvider } from '@mui/material';\nimport './index.scss';\nimport { App } from './App';\nimport store from './app/store';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#9A1750',\n    },\n    secondary: {\n      main: '#E3AFBC',\n    },\n  },\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}